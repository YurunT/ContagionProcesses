import argparse
import numpy as np

def test_import():
    print("import test succeeds!")

def add_args(args, parser):
    parser.add_argument('-n',      type = int,   default = 200000, help='200,000 (default); |N|: the number of nodes considered in primary and auxilary networks')
    parser.add_argument('-alpha',  type = float, default = 0.8, help='0.8 (default); Probability of each node in |N| is also in the auxilary network.')
    parser.add_argument('-e',      type = int,   default = 50,     help='50 (default); the number of experiments')

    parser.add_argument('-T',   nargs='+', type = float, help='Need to specify 2 original transimissibilities, first is for the primary network, second is for the auxilary network. Value range is [0, 1]')
    parser.add_argument('-th',     type = float, default = 0.001, help='0.001 (default); the treshold to consider a component giant')
    parser.add_argument('-nc',     type = int, default = 40, help='Number of Cores')
    parser.add_argument('-mind', nargs='+', type = float, default = 0,  help='The min mean_degrees considered in the series of experiments/analysis. Need to specify 2 values for the primary network and the auxilary network.')
    parser.add_argument('-maxd',   nargs='+', type = float, default = 10, help='The max mean_degrees considered in the series of experiments/analysis. Need to specify 2 values for the primary network and the auxilary network.')
    parser.add_argument('-mdl1', nargs='+', type=float, help='When you want to specify a particular mean_degree_list1 for the PRIMARY network, rather than generate it from maxd[0], mind[0] and ns[0]. If this is an empty list, mean_degree_list1 will be generated by maxd[0], mind[0] and ns[0]')
    parser.add_argument('-mdl2', nargs='+', type=float, help='When you want to specify a particular mean_degree_list2 for the AUXILARY network, rather than generate it from maxd[1], mind[1] and ns[1]. If this is an empty list, mean_degree_list2 will be generated by maxd[1], mind[1] and ns[1]')
    parser.add_argument('-ns',   nargs='+', type = int, default = 50, help='Need to specify 2 values. Num of sample within [min_degree, max_degree] for both primary network and auxilary network.')
    parser.add_argument('-kmax', nargs='+', type = int,   default = None, help='Need to specify 2 values. Default: None, calculate by the code using 5 * maxd[i] ; If manually specify it, kmax value needs to be at least maxd[i] to be runnable. Note, the ideal value of kmax is +infty. Usually recommend set it to 2 * maxd[i] at least. i=1, 2 currently')
    parser.add_argument('-cp',     type = int, default = 500, help='Num of exps to save a checkpoint')
    parser.add_argument('-change', type = int, default = 0,   help='Change m(0), T(1), tm(2)')
    parser.add_argument('-msg',    type = str, default = 'normal',   help='The brief title of this batch of experiments indicating the purpose')
    parser.add_argument('-m',   nargs='+', type=float, help='(m1, m2, ..., mM). Sum(m) = 1')
    parser.add_argument('-tm1', nargs='+', type = float, help='Specify a list of M Outward effeciencies for M types of masks, from type 0 to M')
    parser.add_argument('-tm2', nargs='+', type = float, help='Specify a list of M Inward effeciencies for M types of masks, from type 0 to M')
    parser.add_argument('-modelname', type = str, default = 'mask', help='choose from {mask, mutation,}')
    parser.add_argument('-itemname' , type = str, default = 'es',   help='choose from {es(for analysis), pe(for analysis), sim}'  )
    return parser

def parse_args(args):
    '''
    parse function
    '''
    parser = argparse.ArgumentParser(description = 'Parameters')
    parser = add_args(args, parser)
    return parser.parse_args(args)

    


